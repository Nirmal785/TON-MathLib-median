#include "imports/stdlib.fc";

const int error::invalid_value = 256;

(int) tlen (tuple t) asm "TLEN";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

int mulmod(int a, int b, int c) inline {
    (_,int res) = muldivmod(a, b, c);
    return res;
}

int gcd(int a, int b) inline {
    while (b != 0) {
        a %= b;
        (a, b) = (b, a);
    }
    return a;
}

int lcm(int a, int b) inline {
    return a / gcd(a, b) * b;
}

int pow(int a, int n) inline {
    if (a = 0 & n == 0) {
        return 1;
    }
    if (a == 0) {
        return 0;
    }
    int res = 1;
    while(n) {
        if (n & 1) {
            res *= a;
        }
        a *= a;
        n >>= 1;
    }
    return res;
}

int powmod(int a, int n, int m) inline {
    if (a = 0 & n == 0) {
        return 1;
    }
    if (a == 0) {
        return 0;
    }
    int res = 1;
    while(n) {
        if (n & 1) {
            res = mulmod(res, a, m);
        }
        a *= mulmod(a, a, m);
        n >>= 1;
    }
    return res;
}

int log2(int a) asm "UBITSIZE DEC";

int log10(int a) inline {
    return muldiv(log2(a), 10000000000000000, 33219280948873626);
}

int log(int a, int b) inline {
    return log2(a) / log2(b);
}

int sqrt(int a) inline {
    int shift = log2(a);
    a += a & 1;
    int result = 0;
    do {
        shift -= 2;
        result <<= 1;
        result |= 1;
        if (result * result > (a >> shift)) {
            result ^= 1;
        }
    } until (shift != 0);
    return result;
}

int cbrt(int n) inline {
    
    int val = n/3;
    int temp = 0;

    while (val!=temp) {
        temp = val;
        val = (n/(temp*temp) + (temp*2))/3;
    }
    return val;
}

int is_prime_fermat(int n, int k) inline {
    throw_if(error::invalid_value, (n <= 0) | (k < 1));
    if (n <= 3) {
        return true;
    }
    int a = 0;
    randomize_lt();
    while (k > 0) {
        a = rand(n - 4) + 2;
        if (gcd(n, a) != 1) {
            return false;
        }
        if (powmod(a, n - 1, n) != 1) {
            return false;
        }
        k -= 1;
    }
    return true;
}

int factmod(int n, int p) {
	int res = 1;
	while (n > 1) {
		res = (res * ((n / p) % 2 ? p - 1 : 1)) % p;
        int i = 2;
		while (i <= n % p) {
			res = (res * i) % p;
            i += 1;
        }
		n /= p;
	}
	return res % p;
}


int median(int t){
    sorted_t = sorted(t)
  length = len(sorted_t)
   
    if length % 2 == 1:
    return sorted_t[length // 2]

    else:
    return (sorted_t[length // 2] + sorted_t[length // 2 - 1]) / 2
}

function quadratic(x: tuple, a: int, b: int, c: int) -> int
  return a * x^2 + b * x + c
end function
